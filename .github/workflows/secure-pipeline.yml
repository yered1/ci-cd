name: secure-pipeline

on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write
  security-events: write

jobs:
  # ---- GITLEAKS (secrets) ----
  secrets_gitleaks:
    name: Secret scanning (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks (Docker)
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/repo" \
            -w /repo \
            zricethezav/gitleaks:latest \
            detect --source="/repo" \
                   --report-format sarif \
                   --report-path "/repo/gitleaks.sarif"

      - name: Upload SARIF (Gitleaks)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "${{ github.workspace }}/gitleaks.sarif"

  # ---- SEMGREP (SAST) ----
  sast_semgrep:
    name: SAST (Semgrep)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Semgrep
        run: |
          python -m pip install --upgrade pip
          pip install semgrep

      - name: Run Semgrep
        run: |
          semgrep --version
          semgrep scan \
            --config p/owasp-top-ten \
            --config p/secrets \
            --config p/r2c-security-audit \
            --error \
            --sarif --output "${{ github.workspace }}/semgrep.sarif"

      - name: Upload SARIF (Semgrep)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "${{ github.workspace }}/semgrep.sarif"

  # ---- TRIVY (Repo FS/IaC/Secrets) ----
  trivy_repo:
    name: Trivy (FS/IaC/Secrets) on repo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Trivy filesystem scan
        id: trivy_fs
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scanners: 'vuln,config,secret,license'
          format: 'sarif'
          output: '${{ github.workspace }}/trivy-fs.sarif'
          ignore-unfixed: true
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        continue-on-error: true

      # Always leave a VALID SARIF so upload never fails
      - name: Ensure SARIF exists (Trivy FS)
        if: always()
        run: |
          set -euo pipefail
          FILE="${{ github.workspace }}/trivy-fs.sarif"
          if [ ! -s "$FILE" ]; then
            printf '%s' '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"trivy","informationUri":"https://github.com/aquasecurity/trivy"}},"results":[]}]}'
            > "$FILE"
          fi
          python3 -c 'import json,sys; json.load(open(sys.argv[1])); print("SARIF OK")' "$FILE"


      - name: Upload SARIF (Trivy FS)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: '${{ github.workspace }}/trivy-fs.sarif'

  # ---- BUILD + SBOM + ATTEST + TRIVY(image) ----
  build_push_scan:
    name: Build, SBOM, attest & scan images
    runs-on: ubuntu-latest
    needs: [secrets_gitleaks, sast_semgrep, trivy_repo]
    strategy:
      matrix:
        service: [juice, dvga]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push ${{ matrix.service }}
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.${{ matrix.service }}
          push: true
          provenance: false
          tags: |
            ghcr.io/${{ github.repository }}:${{ matrix.service }}-latest
            ghcr.io/${{ github.repository }}:${{ matrix.service }}-${{ github.sha }}

      - name: Attest build provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: CycloneDX SBOM for image
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ github.repository }}:${{ matrix.service }}-${{ github.sha }}
          format: cyclonedx-json
          artifact-name: sbom-${{ matrix.service }}.cdx.json

      - name: Trivy scan (image) - fail on HIGH/CRITICAL
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ matrix.service }}-${{ github.sha }}
          format: 'sarif'
          output: '${{ github.workspace }}/trivy-${{ matrix.service }}.sarif'
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'

      - name: Upload SARIF (Trivy image)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: '${{ github.workspace }}/trivy-${{ matrix.service }}.sarif'

  # ---- ZAP BASELINE (DAST) via Docker ----
  dast_zap_baseline:
    name: DAST (OWASP ZAP baseline) vs Juice Shop
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for workspace)
        uses: actions/checkout@v4

      - name: Prepare ZAP rules.tsv (TAB-separated)
        run: |
          mkdir -p .zap
          # real TABs between columns:
          printf '# ruleId\tthreshold\taction\n10063\tWARN\tIGNORE\n10054\tWARN\tIGNORE\n' > .zap/rules.tsv

      - name: Make workspace writable for container
        run: sudo chmod -R a+rwx "${{ github.workspace }}"

      - name: Start Juice Shop
        run: |
          docker network create zapnet || true
          docker run -d --rm --name juice --network zapnet -p 3000:3000 bkimminich/juice-shop:latest
          for i in {1..30}; do
            if curl -sSf http://localhost:3000 >/dev/null; then echo "Juice Shop up"; break; fi
            sleep 2
          done

      - name: ZAP Baseline (Docker) -> reports in workspace
        run: |
          docker run --rm --network zapnet \
            --user root \
            -v "${{ github.workspace }}:/zap/wrk" \
            -w /zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
              -t "http://juice:3000" \
              -c ".zap/rules.tsv" \
              -a -m 1 \
              -J "zap.json" \
              -w "zap.md" \
              -r "zap.html"

      - name: Upload ZAP reports (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: zap-baseline
          path: |
            ${{ github.workspace }}/zap.html
            ${{ github.workspace }}/zap.md
            ${{ github.workspace }}/zap.json
          if-no-files-found: warn
          retention-days: 7

      - name: Stop Juice
        if: always()
        run: docker stop juice || true

