name: secure-pipeline

on:
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write
  security-events: write

jobs:
  # ---- GITLEAKS (secrets) ----
  secrets_gitleaks:
    name: Secret scanning (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Gitleaks
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64.tar.gz \
          | tar -xz && sudo mv gitleaks /usr/local/bin/

      - name: Run Gitleaks
        continue-on-error: true
        run: |
          gitleaks detect \
            --source "${{ github.workspace }}" \
            --report-format sarif \
            --report-path "${{ github.workspace }}/gitleaks.sarif"

      - name: Upload SARIF (Gitleaks)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "${{ github.workspace }}/gitleaks.sarif"

  # ---- SEMGREP (SAST) ----
  sast_semgrep:
    name: SAST (Semgrep)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Semgrep
        run: |
          python -m pip install --upgrade pip
          pip install semgrep

      - name: Run Semgrep
        continue-on-error: true
        run: |
          semgrep --version
          semgrep scan \
            --config p/owasp-top-ten \
            --config p/secrets \
            --config p/r2c-security-audit \
            --error \
            --sarif --output "${{ github.workspace }}/semgrep.sarif"

      - name: Upload SARIF (Semgrep)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "${{ github.workspace }}/semgrep.sarif"

  # ---- TRIVY (Repo FS/IaC/Secrets) ----
  trivy_repo:
    name: Trivy (FS/IaC/Secrets) on repo
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Trivy filesystem scan
        # Trivy will scan vulnerabilities, misconfigs (IaC), and secrets in the repo
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scanners: 'vuln,config,secret,license'
          format: 'sarif'
          output: '${{ github.workspace }}/trivy-fs.sarif'
          ignore-unfixed: true
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        continue-on-error: true

      - name: Upload SARIF (Trivy FS)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: '${{ github.workspace }}/trivy-fs.sarif'

  # ---- BUILD + SBOM + ATTEST + TRIVY(image) ----
  build_push_scan:
    name: Build, SBOM, attest & scan images
    runs-on: ubuntu-latest
    needs: [secrets_gitleaks, sast_semgrep, trivy_repo]
    strategy:
      matrix:
        service: [juice, dvga]
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push ${{ matrix.service }}
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.${{ matrix.service }}
          push: true
          provenance: false
          tags: |
            ghcr.io/${{ github.repository }}:${{ matrix.service }}-latest
            ghcr.io/${{ github.repository }}:${{ matrix.service }}-${{ github.sha }}

      - name: Attest build provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: CycloneDX SBOM for image
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ github.repository }}:${{ matrix.service }}-${{ github.sha }}
          format: cyclonedx-json
          artifact-name: sbom-${{ matrix.service }}.cdx.json

      - name: Trivy scan (image) - fail on HIGH/CRITICAL
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ matrix.service }}-${{ github.sha }}
          format: 'sarif'
          output: '${{ github.workspace }}/trivy-${{ matrix.service }}.sarif'
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'

      - name: Upload SARIF (Trivy image)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: '${{ github.workspace }}/trivy-${{ matrix.service }}.sarif'

  # ---- ZAP BASELINE (DAST) ----
  dast_zap_baseline:
    name: DAST (OWASP ZAP baseline) vs Juice Shop
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4   # ensures .zap/rules.tsv is available

      - name: Launch Juice Shop
        run: |
          docker run -d --rm -p 3000:3000 --name juice bkimminich/juice-shop:latest
          for i in {1..30}; do
            if curl -sSf http://localhost:3000 >/dev/null; then echo "Juice Shop up"; break; fi
            sleep 2
          done

      - name: ZAP Baseline
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -m 1'

      - name: Stop
        if: always()
        run: docker stop juice

